{"version":3,"sources":["components/select/item.jsx","components/select/input.jsx","components/select/select.jsx","index.js"],"names":["Items","items","this","props","isFiltered","mask","inputValue","split","pop","filter","value","name","indexOf","listClassName","isActive","className","map","index","key","selectItem","multiple","React","Component","Item","state","isSelected","itemClassName","onClick","undefined","icon","src","process","alt","setState","prevState","Input","showList","placeholder","inputIsEmpty","clearInput","wrapperClassName","labelClassName","length","type","autoComplete","onChange","handleChange","readOnly","Select","handleClickOutside","event","domNode","ReactDOM","findDOMNode","contains","target","selectedItems","isLoaded","bind","listToObject","list","forEach","item","i","isRepeat","replace","document","addEventListener","listItems","url","fetch","then","response","json","data","console","log","removeEventListener","render","getElementById"],"mappings":"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","file":"static/js/main.ec28efab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Items extends React.Component {\r\n    render() {\r\n        let items\r\n        switch (this.props.isFiltered) {\r\n            case true:\r\n                const mask = this.props.inputValue.split(' ').pop();\r\n                items = this.props.items.filter(value => {\r\n                    if (value.name.indexOf(mask) !== -1) return true\r\n                })\r\n                break;\r\n        \r\n            default:\r\n                items = this.props.items\r\n                break;\r\n        }\r\n        const listClassName = this.props.isActive ? 'select__list select__list_display' : 'select__list'\r\n        \r\n        return (\r\n            <div className={listClassName}>\r\n                {items.map((value, index) => (\r\n                    <Item \r\n                        inputValue={this.props.inputValue}\r\n                        key={index}\r\n                        selectItem={this.props.selectItem}\r\n                        value={value}\r\n                        multiple={this.props.multiple}\r\n                         />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Item extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isSelected: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.props\r\n        const itemClassName = this.props.inputValue.indexOf(value.name) !== -1 ? 'list-item list-item_selected' : 'list-item'\r\n        return (\r\n            <div className={itemClassName}  onClick={() => this.selectItem(value.name)}>\r\n                <span className='list-item__text'>{value.name}</span>\r\n                {value.icon !== undefined &&\r\n                    <img className='list-item__icon' src={`${process.env.PUBLIC_URL}/img/${value.icon}`} alt={value.name} />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    selectItem(value) {\r\n        if (this.props.multiple) \r\n        this.setState((prevState) => ({isSelected: !prevState.isSelected}))\r\n        this.props.selectItem(value)\r\n    }\r\n\r\n}\r\nexport default Items","import React from 'react'\r\n\r\nclass Input extends React.Component {\r\n\r\n    render() {\r\n\r\n        const { showList, placeholder, inputIsEmpty, clearInput } = this.props\r\n        const wrapperClassName = this.props.isActive ? 'input__wrapper input__wrapper_focus' : 'input__wrapper'\r\n        const labelClassName = this.props.inputValue.length !== 0 ? 'select__label-text select__label-text_small' : 'select__label-text'\r\n\r\n        return (       \r\n            <div className={wrapperClassName} onClick={() => showList()}>\r\n                <input \r\n                    type=\"text\" \r\n                    className='select__input' \r\n                    value={this.props.inputValue}  \r\n                    autoComplete='no'\r\n                    onChange={this.props.handleChange}\r\n                    readOnly={!this.props.isFiltered}\r\n                    />\r\n                {!inputIsEmpty && \r\n                    <img className='input__close' onClick={() => clearInput()} src={`${process.env.PUBLIC_URL}/img/close.png`} alt='Очистить'/>\r\n                }\r\n                <div className={labelClassName}>{placeholder}</div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Input","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './style.css'\r\nimport Items from './item'\r\nimport Input from './input'\r\n\r\nclass Select extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isActive: false,\r\n            inputIsEmpty: true,\r\n            selectedItems: [],\r\n            items: undefined,\r\n            inputValue: '',\r\n            isLoaded: false\r\n        }\r\n\r\n        this.showList = this.showList.bind(this)\r\n        this.selectItem = this.selectItem.bind(this)\r\n        this.clearInput = this.clearInput.bind(this)\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        this.listToObject()\r\n        return (\r\n            <div className='select__container'>\r\n                <Input \r\n                    showList={this.showList} \r\n                    isActive={this.state.isActive} \r\n                    placeholder={this.props.placeholder}\r\n                    inputIsEmpty={this.state.inputIsEmpty}\r\n                    clearInput={this.clearInput}\r\n                    inputValue={this.state.inputValue}\r\n                    handleChange={this.handleChange}\r\n                    isFiltered={this.props.isFiltered}\r\n                    />\r\n                {this.state.isLoaded && \r\n                    <Items \r\n                    isActive={this.state.isActive}\r\n                    multiple={this.props.multiple}\r\n                    items={this.state.items} \r\n                    selectItem={this.selectItem}\r\n                    inputValue={this.state.inputValue}\r\n                    isFiltered={this.props.isFiltered}\r\n                    />}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            inputValue: event.target.value,\r\n            inputIsEmpty: false\r\n        })\r\n    }\r\n\r\n    listToObject() {\r\n        const list = this.props.list\r\n        if (list !== undefined) {\r\n            let items = []\r\n            list.forEach((item,i) => {\r\n                items[i] = {\r\n                    name: item\r\n                }\r\n            })\r\n            return items;\r\n        } else return false\r\n    }\r\n\r\n    selectItem(value) {\r\n        \r\n        let inputValue = this.state.inputValue\r\n        const isRepeat = inputValue.indexOf(value) !== -1\r\n        switch (this.props.multiple) {\r\n            case true:\r\n                inputValue = isRepeat ? \r\n                    inputValue.replace(` ${value},`,'')\r\n                        :\r\n                    `${this.state.inputValue} ${value},`\r\n                this.setState({ \r\n                    inputValue: inputValue,\r\n                    inputIsEmpty: false\r\n                })\r\n                break;\r\n            default:\r\n                inputValue = isRepeat ?\r\n                    '' : value\r\n                this.setState({ \r\n                    inputValue,\r\n                    inputIsEmpty: false\r\n                })\r\n                break;\r\n        }\r\n    }\r\n\r\n    clearInput() {\r\n        this.setState(() => ({\r\n            inputValue: '',\r\n            inputIsEmpty: true\r\n        }))\r\n    }\r\n\r\n    showList() {\r\n        this.setState(state => ({\r\n            isActive: !state.isActive\r\n        }))\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('click', this.handleClickOutside, true);\r\n        const listItems = this.listToObject();\r\n        if (this.props.url !== undefined) {\r\n            fetch(this.props.url)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const {items} = data\r\n                    this.setState({\r\n                        items,\r\n                        isLoaded: true\r\n                    })\r\n                })\r\n        } else if (listItems) {\r\n            this.setState({items: listItems, isLoaded: true})\r\n        } else if (this.props.items !== undefined) {\r\n            this.setState({items: this.props.items, isLoaded: true})\r\n        } else console.log('Данные не получены!');\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click', this.handleClickOutside, true);\r\n    }\r\n\r\n    handleClickOutside = event => {\r\n        const domNode = ReactDOM.findDOMNode(this);\r\n\r\n        if (!domNode || !domNode.contains(event.target)) {\r\n            this.setState({\r\n                isActive: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default Select","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport Select from './components/select/select.jsx'\r\nimport {items} from './countries.json'\r\n\r\nrender(\r\n    <div className=\"wrapper\">\r\n        <p>На входе поступает массив строк с вариантами выбора:</p>\r\n        <Select \r\n            placeholder='Имя'\r\n            list={['Ваня','Петя','Саша','Андрей']}\r\n            />\r\n        <p>Исходные данные получены путем импорта JSON объекта, включен мультивыбор</p>\r\n        <Select \r\n            placeholder={'Страна'}\r\n            multiple\r\n            items={items}\r\n            />\r\n        <p>Список получен по URL адресу с помощью .fetch()</p>\r\n        <Select \r\n            placeholder='Операционная система'\r\n            url={`${process.env.PUBLIC_URL}/json/os.json`}\r\n            isFiltered\r\n            />\r\n    </div>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}